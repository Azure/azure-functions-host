---
tableStorage:
    table: apicountertablelocal
    partitionKey: items
    connection: AzureWebJobsStorage

language: CSharp

commonCode: |
        #r "Microsoft.WindowsAzure.Storage"
        using System.Net;
        using Microsoft.WindowsAzure.Storage.Table;
        using System.Net.Http;
        public class Counter : TableEntity
        {
            public int Value { get; set; }
        }
    
functions:
    - name: initialize
      trigger: "PUT@counter/{counterName}"
      bindings:
        - "counter:table-out"
      codeLocation: "initialize.csx"
    - name: get
      trigger: "GET@counter/{counterName}"
      bindings:
        - "counters:table-in"
      code: |
        public static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log, IQueryable<Counter> counters, string counterName)
        {
            Counter counter = counters.Where(c => c.RowKey.Equals(counterName)).FirstOrDefault();
            if(counter == null)
            {
                return new HttpResponseMessage(HttpStatusCode.BadRequest)
                {
                    Content = new StringContent("The counter you are trying to retrieve does not exist.")
                };
            }
            return new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent("The counter's value is " + counter.Value)
            };
        }
    - name: add
      trigger: "POST@counters/{counterName}/addValue/{addValue:int}"
      bindings:
        - "tableBinding:table-out"
      code: |
        public static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log, CloudTable tableBinding, string counterName, int addValue)
        {
            //retrieve the value of the counter if it exists
            var getCurrentValue = new TableQuery<Counter>().Where(TableQuery.GenerateFilterCondition("RowKey", QueryComparisons.Equal, counterName));
            Counter counter = tableBinding.ExecuteQuery(getCurrentValue).FirstOrDefault();
            //if the counter doesn't exist, return a bad request
            if(counter == null)
            {
                return new HttpResponseMessage(HttpStatusCode.BadRequest)
                {
                    Content = new StringContent("The counter you are trying to update doesn't yet exist.")
                };
            } 
            //add the appropriate value to the counter and update the database
            counter.Value += addValue;
            TableOperation updateOperation = TableOperation.Replace(counter);
            tableBinding.Execute(updateOperation);
            return new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent("Updated the value of the counter by " + addValue + ".")
            };
        }
    - name: dailyReset
      trigger: "TIMER@0 0 * * * *"
      bindings:
        - "tableBinding:table-out"
      code: |
        public static void Run(TimerInfo timerInfo, TraceWriter log, CloudTable tableBinding)
        {
            try 
            {
                var countersQuery = new TableQuery<Counter>();
                var counters = tableBinding.ExecuteQuery(countersQuery);
                TableOperation updateOperation;
                foreach (Counter counter in counters){
                    counter.Value = 0;
                    updateOperation = TableOperation.Replace(counter);
                    tableBinding.Execute(updateOperation);
                }
            } catch (Exception ex){
                log.Info(ex.Message);
            }
        }
      

