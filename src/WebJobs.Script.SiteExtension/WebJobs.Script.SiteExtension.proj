<Project Sdk="Microsoft.Build.NoTargets">
  <Import Project="../../build/common.props" />
  <Import Project="../../build/workers.props" />

  <PropertyGroup>
    <!-- TFM and RId are actually used. -->
    <TargetFramework>net6.0</TargetFramework>
    <RuntimeIdentifier>win</RuntimeIdentifier>
    <SiteExtensionName>Functions</SiteExtensionName>
    <PublishWebHostDependsOn>
      PublishProjectReferences;
      PublishPrivateProjectReferences;
      RemoveUnneededRuntimes;
      MoveSymbols;
      DeletePrivateSymbols;
      WriteHardLinkHashes;
    </PublishWebHostDependsOn>
    <PublishPropertiesToRemove>PublishZip;PublishZipDir</PublishPropertiesToRemove>
  </PropertyGroup>

  <ItemGroup>
    <!-- We don't ship python with the site extension. -->
    <PackageReference Remove="Microsoft.Azure.Functions.PythonWorker" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="../WebJobs.Script.WebHost/WebJobs.Script.WebHost.csproj" ReferenceOutputAssembly="false" />
  </ItemGroup>

  <ItemGroup>
    <PublishRuntimeIdentifier Include="win-x86" SelfContained="false" PublishDir="32bit" PrivateExtension="true" />
    <PublishRuntimeIdentifier Include="win-x64" SelfContained="false" PublishDir="64bit" PrivateExtension="false" />
  </ItemGroup>

  <Import Project="Tasks.targets" />

  <!-- We set many properties and items in targets to ensure $(Version) is finalized. -->
  <Target Name="UpdatePaths" BeforeTargets="AddRuntimesToProjects;AssignTargetPaths">
    <PropertyGroup>
      <SiteExtensionRelativeDir>SiteExtension/$(Version)/</SiteExtensionRelativeDir>
      <SiteExtensionDir>$([MSBuild]::NormalizePath('$(PublishDir)$(SiteExtensionRelativeDir)'))</SiteExtensionDir>
      <PrivateSiteExtensionRelativeDir>PrivateSiteExtension/SiteExtensions/Functions/</PrivateSiteExtensionRelativeDir>
      <PrivateSiteExtensionDir>$([MSBuild]::NormalizePath('$(PublishDir)$(PrivateSiteExtensionRelativeDir)'))</PrivateSiteExtensionDir>
      <PublishZipDir Condition="'$(PublishZipDir)' == '' AND '$(PublishZip)' == 'true'">$(PublishDir)</PublishZipDir>
    </PropertyGroup>
    <ItemGroup>
      <None Include="applicationHost.xdt" TargetPath="$(SiteExtensionRelativeDir)applicationHost.xdt" CopyToPublishDirectory="PreserveNewest" />
      <None Include="applicationHost.xdt" TargetPath="$(PrivateSiteExtensionRelativeDir)applicationHost.xdt" CopyToPublishDirectory="PreserveNewest" />
      <None Include="extension.xml" TargetPath="SiteExtension/extension.xml" CopyToPublishDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>

  <Target Name="UpdateWorkerPaths" DependsOnTargets="UpdatePaths" BeforeTargets="AssignTargetPaths">
    <ItemGroup>
      <None Condition="'%(TargetPath)' != '' AND $([System.String]::new('%(TargetPath)').StartsWith('workers'))">
        <TargetPath>$(SiteExtensionRelativeDir)%(TargetPath)</TargetPath>
      </None>
    </ItemGroup>
  </Target>

  <Target Name="AddRuntimesToProjects" BeforeTargets="AssignProjectConfiguration">
    <ItemGroup>
      <_ProjectReferenceWithRuntimes Include="@(ProjectReference)">
        <AdditionalProperties>
          <!-- These properties will not be pass transitively and are safe for build. -->
          RuntimeIdentifier=%(PublishRuntimeIdentifier.Identity);
          SelfContained=%(PublishRuntimeIdentifier.SelfContained)
        </AdditionalProperties>
        <PublishRuntime>%(PublishRuntimeIdentifier.Identity)</PublishRuntime>
        <PublishDir>$(SiteExtensionDir)%(PublishRuntimeIdentifier.PublishDir)/</PublishDir>
        <PublishPrivateDir>$(PrivateSiteExtensionDir)%(PublishRuntimeIdentifier.PublishDir)/</PublishPrivateDir>
        <PublishPrivate>%(PublishRuntimeIdentifier.PrivateExtension)</PublishPrivate>
        <Private>false</Private> <!-- Avoids including transitive output. -->
      </_ProjectReferenceWithRuntimes>
      <ProjectReference Remove="@(ProjectReference)" />
      <ProjectReference Include="@(_ProjectReferenceWithRuntimes)" />
    </ItemGroup>
  </Target>

  <Target Name="PublishWebHost" AfterTargets="PrepareForPublish" BeforeTargets="Publish" DependsOnTargets="$(PublishWebHostDependsOn)" />

  <Target Name="PublishProjectReferences" AfterTargets="PrepareForPublish" BeforeTargets="Publish">
    <ItemGroup>
      <_PublishProjectReferenceExistent Include="@(_MSBuildProjectReferenceExistent)">
        <AdditionalProperties>%(AdditionalProperties);PublishDir=%(PublishDir);_IsPublishing=true;PublishWorkers=false</AdditionalProperties>
      </_PublishProjectReferenceExistent>
      <PublishZipDirectory Include="$(PublishDir)SiteExtension" TargetName="$(SiteExtensionName).$(Version).zip" />
    </ItemGroup>
    <MSBuild Projects="@(_PublishProjectReferenceExistent)"
      Targets="Publish"
      BuildInParallel="$(BuildInParallel)"
      Properties="NoBuild=true"
      RemoveProperties="$(PublishPropertiesToRemove)"/>
  </Target>

  <Target Name="PublishPrivateProjectReferences" AfterTargets="PublishProjectReferences" BeforeTargets="Publish">
    <ItemGroup>
      <_PublishPrivateProjectReferenceExistent Include="@(_MSBuildProjectReferenceExistent)" Condition="%(PublishPrivate)">
        <AdditionalProperties>%(AdditionalProperties);PublishDir=%(PublishPrivateDir);_IsPublishing=true</AdditionalProperties>
      </_PublishPrivateProjectReferenceExistent>
      <PublishZipDirectory
        Include="$(PublishDir)PrivateSiteExtension"
        TargetName="@(_PublishPrivateProjectReferenceExistent->'$(SiteExtensionName).Private.$(Version).%(PublishRuntime).zip')" />
    </ItemGroup>
    <MSBuild Projects="@(_PublishPrivateProjectReferenceExistent)"
      Targets="Publish"
      BuildInParallel="$(BuildInParallel)"
      Properties="NoBuild=true"
      RemoveProperties="$(PublishPropertiesToRemove)"/>
    <RemoveDir Directories="@(_PublishPrivateProjectReferenceExistent->'%(PublishPrivateDir)/workers/python')" />
  </Target>

  <Target Name="RemoveUnneededRuntimes">
    <!-- These shouldn't exist since we build/publish with a windows runtime, but just in case. -->
    <ItemGroup>
      <_RuntimesToRemove Include="@(PublishRuntimeIdentifier->'$(SiteExtensionDir)%(PublishDir)/runtimes/linux')" />
      <_RuntimesToRemove Include="@(PublishRuntimeIdentifier->'$(SiteExtensionDir)%(PublishDir)/runtimes/osx')" />
      <_RuntimesToRemove Include="@(PublishRuntimeIdentifier->'$(PrivateSiteExtensionDir)%(PublishDir)/runtimes/linux')" Condition="%(PrivateExtension)" />
      <_RuntimesToRemove Include="@(PublishRuntimeIdentifier->'$(PrivateSiteExtensionDir)%(PublishDir)/runtimes/osx')" Condition="%(PrivateExtension)" />
    </ItemGroup>
    <RemoveDir Directories="@(_RuntimesToRemove)" />
  </Target>

  <Target Name="MoveSymbols">
    <ItemGroup>
      <_SymbolDirs Include="@(PublishRuntimeIdentifier->'$(SiteExtensionDir)%(PublishDir)')">
        <Destination>$(PublishDir)Symbols/$(SiteExtensionName).Symbols.$(Version).%(Identity)</Destination>
        <ZipArtifact>$(SiteExtensionName).Symbols.$(Version).%(Identity).zip</ZipArtifact>
      </_SymbolDirs>
      <_WorkerSymbols Include="$(SiteExtensionDir)workers/**/*.pdb" Destination="$(PublishDir)Symbols/$(SiteExtensionName).Symbols.$(Version).%(PublishRuntimeIdentifier.Identity)/workers" />
      <PublishZipDirectory Include="@(_SymbolDirs->'%(Destination)')" TargetName="%(_SymbolDirs.ZipArtifact)" />
    </ItemGroup>
    <MoveSymbols Directories="@(_SymbolDirs)" Destinations="%(Destination)" />
    <Copy SourceFiles="@(_WorkerSymbols)" DestinationFiles="%(Destination)/%(RecursiveDir)%(Filename)%(Extension)" SkipUnchangedFiles="true" />
    <Delete Files="@(_WorkerSymbols)" />
  </Target>

  <Target Name="DeletePrivateSymbols">
    <ItemGroup>
      <_PrivateSymbolsToRemove Include="$(PrivateSiteExtensionDir)/**/*.pdb" />
    </ItemGroup>
    <Delete Files="@(_PrivateSymbolsToRemove)" />
  </Target>

  <Target Name="ComputeHardLinkHashes">
    <ItemGroup>
      <_FilesToHash Include="$(SiteExtensionDir)**" />
    </ItemGroup>
    <GetFileHash Files="@(_FilesToHash)" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_HashedFiles" />
    </GetFileHash>
  </Target>

  <Target Name="WriteHardLinkHashes" DependsOnTargets="ComputeHardLinkHashes">
    <ItemGroup>
      <_HashedFiles RelativePath=".$([System.IO.Path]::DirectorySeparatorChar)$([MSBuild]::MakeRelative('$(SiteExtensionDir)', '%(Identity)'))" />
    </ItemGroup>
    <WriteLinesToFile
      Overwrite="true"
      File="$(SiteExtensionDir)/hashesForHardlinks.txt"
      Lines="@(_HashedFiles->'Hash: %(FileHash) FileName: %(RelativePath)')" />
  </Target>

</Project>
