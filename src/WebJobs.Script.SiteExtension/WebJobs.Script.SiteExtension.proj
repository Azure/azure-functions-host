<Project Sdk="Microsoft.Build.NoTargets">
  <Import Project="..\..\build\common.props" />
  <Import Project="..\..\build\workers.props" />

  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <SiteExtensionName>Functions</SiteExtensionName>
    <PublishWebHostDependsOn>
      PublishProjectReferences;
      RemoveUnneededRuntimes;
      MoveSymbols;
      WriteHardLinkHashes;
    </PublishWebHostDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <!-- We don't ship python with the site extension. -->
    <PackageReference Remove="Microsoft.Azure.Functions.PythonWorker" />
  </ItemGroup>

  <ItemGroup>
    <PublishRuntimeIdentifier Include="win-x86" SelfContained="false" PublishDir="32bit" />
    <PublishRuntimeIdentifier Include="win-x64" SelfContained="false" PublishDir="64bit" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="../WebJobs.Script.WebHost/WebJobs.Script.WebHost.csproj" ReferenceOutputAssembly="false" />
  </ItemGroup>

  <Import Project="Tasks.targets" />

  <!-- We set many properties and items in targets to ensure $(Version) is finalized. -->
  <Target Name="UpdatePaths" BeforeTargets="AddRuntimesToProjects;AssignTargetPaths">
    <PropertyGroup>
      <SiteExtensionRelativeDir>SiteExtension\$(Version)\</SiteExtensionRelativeDir>
      <SiteExtensionDir>$([MSBuild]::NormalizePath('$(PublishDir)$(SiteExtensionRelativeDir)'))</SiteExtensionDir>
    </PropertyGroup>
    <ItemGroup>
      <None Include="applicationHost.xdt" TargetPath="$(SiteExtensionRelativeDir)applicationHost.xdt" CopyToPublishDirectory="PreserveNewest" />
      <None Include="extension.xml" TargetPath="SiteExtension\extension.xml" CopyToPublishDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>

  <Target Name="UpdateWorkerPaths" DependsOnTargets="UpdatePaths" BeforeTargets="AssignTargetPaths">
    <PropertyGroup>
      <!-- Match files that start with "workers/powershell/{version}/runtimes" but also not one of the win runtimes we want to keep. -->
      <_PowershellRuntimesToRemoveRegex>^workers(/|\\)powershell(/|\\).*(/|\\)runtimes(/|\\)(?!win(/|\\)|win-x86(/|\\)|win10-x86(/|\\)|win-x64(/|\\)|win10-x64(/|\\))</_PowershellRuntimesToRemoveRegex>
    </PropertyGroup>

    <ItemGroup>
      <_PowershellRuntimeToRemove Include="@(None)" Condition="'%(TargetPath)' != '' AND $([System.Text.RegularExpressions.Regex]::IsMatch('%(TargetPath)', $(_PowershellRuntimesToRemoveRegex)))" />
      <None Remove="@(_PowershellRuntimeToRemove)" />
    </ItemGroup>

    <ItemGroup>
      <None Condition="'%(TargetPath)' != '' AND $([System.String]::new('%(TargetPath)').StartsWith('workers'))">
        <TargetPath>$(SiteExtensionRelativeDir)%(TargetPath)</TargetPath>
      </None>
    </ItemGroup>
  </Target>

  <Target Name="AddRuntimesToProjects" BeforeTargets="AssignProjectConfiguration">
    <ItemGroup>
      <_ProjectReferenceWithRuntimes Include="@(ProjectReference)">
        <AdditionalProperties>
          RuntimeIdentifier=%(PublishRuntimeIdentifier.Identity);
          SelfContained=%(PublishRuntimeIdentifier.SelfContained);
          PublishDir=$(SiteExtensionDir)%(PublishRuntimeIdentifier.PublishDir)/;
          PublishWorkers=false
        </AdditionalProperties>
        <Private>false</Private> <!-- Avoids including transitive output. -->
      </_ProjectReferenceWithRuntimes>
      <ProjectReference Remove="@(ProjectReference)" />
      <ProjectReference Include="@(_ProjectReferenceWithRuntimes)" />
    </ItemGroup>
  </Target>

  <Target Name="PublishWebHost" AfterTargets="PrepareForPublish" BeforeTargets="Publish" DependsOnTargets="$(PublishWebHostDependsOn)" />

  <Target Name="PublishProjectReferences" AfterTargets="PrepareForPublish" BeforeTargets="Publish">
    <MSBuild Projects="@(ProjectReference)" Targets="Publish" BuildInParallel="$(BuildInParallel)" Properties="NoBuild=true" />
  </Target>

  <Target Name="RemoveUnneededRuntimes">
    <ItemGroup>
      <_RuntimesToRemove Include="@(PublishRuntimeIdentifier->'$(SiteExtensionDir)%(PublishDir)/runtimes/linux')" />
      <_RuntimesToRemove Include="@(PublishRuntimeIdentifier->'$(SiteExtensionDir)%(PublishDir)/runtimes/osx')" />
    </ItemGroup>
    <RemoveDir Directories="@(_RuntimesToRemove)" />
  </Target>

  <Target Name="MoveSymbols">
    <ItemGroup>
      <_SymbolDirs Include="@(PublishRuntimeIdentifier->'$(SiteExtensionDir)%(PublishDir)')">
        <Destination>$(PublishDir)Symbols\$(SiteExtensionName).Symbols.$(Version).%(Identity)</Destination>
      </_SymbolDirs>
      <_WorkerSymbols Include="$(SiteExtensionDir)workers/**/*.pdb" Destination="$(PublishDir)Symbols\$(SiteExtensionName).Symbols.$(Version).%(PublishRuntimeIdentifier.Identity)/workers" />
    </ItemGroup>
    <MoveSymbols Directories="@(_SymbolsDirs)" Destinations="%(Destination)" />
    <Copy SourceFiles="@(_WorkerSymbols)" DestinationFiles="%(Destination)/%(RecursiveDir)%(Filename)%(Extension)" SkipUnchangedFiles="true" />
    <Delete Files="@(_WorkerSymbols)" />
  </Target>

  <Target Name="ComputeHardLinkHashes">
    <ItemGroup>
      <_FilesToHash Include="$(SiteExtensionDir)**" />
    </ItemGroup>
    <GetFileHash Files="@(_FilesToHash)" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_HashedFiles" />
    </GetFileHash>
  </Target>

  <Target Name="WriteHardLinkHashes" DependsOnTargets="ComputeHardLinkHashes">
    <ItemGroup>
      <_HashedFiles RelativePath=".$([System.IO.Path]::DirectorySeparatorChar)$([MSBuild]::MakeRelative('$(SiteExtensionDir)', '%(Identity)'))" />
    </ItemGroup>
    <WriteLinesToFile
      Overwrite="true"
      File="$(SiteExtensionDir)/hashesForHardlinks.txt"
      Lines="@(_HashedFiles->'Hash: %(FileHash) FileName: %(RelativePath)')" />
  </Target>

</Project>
