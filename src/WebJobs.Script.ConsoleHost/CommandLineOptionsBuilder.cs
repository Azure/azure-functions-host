using CommandLine;
using Microsoft.Azure.WebJobs.Host;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using WebJobs.Script.ConsoleHost.Extensions;
using WebJobs.Script.ConsoleHost.Scenarios;
using WebJobs.Script.ConsoleHost.Common;
using System.Diagnostics;
using WebJobs.Script.ConsoleHost.Cli;
using WebJobs.Script.ConsoleHost.Cli.Types;

namespace WebJobs.Script.ConsoleHost
{
    public static class CommandLineOptionsBuilder
    {
        public static readonly ConstructorInfo VerbOptionAttributeCtor = typeof(VerbOptionAttribute).GetConstructor(new[] { typeof(string) });
        public static readonly IEnumerable<Type> BaseOptionsTypes = typeof(BaseAbstractOptions).GetImplementingTypes();
        public static readonly IEnumerable<Type> ScenarioTypes = typeof(Scenario).GetImplementingTypes();

        public static object CreateObject()
        {
            return Activator.CreateInstance(GetCommandLineOptionType());
        }

        // http://stackoverflow.com/a/3862241
        private static Type GetCommandLineOptionType()
        {
            TypeBuilder tb = GetTypeBuilder();
            ConstructorBuilder constructor = tb.DefineDefaultConstructor(MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName);

            // NOTE: assuming your list contains Field objects with fields FieldName(string) and FieldType(Type)
            foreach (var propertyType in BaseOptionsTypes)
                CreateVerbProperty(tb, propertyType.Name, propertyType);

            Type objectType = tb.CreateType();
            return objectType;
        }

        private static TypeBuilder GetTypeBuilder()
        {
            var typeSignature = "CommandLineOptionsAutoGeneratedType";
            var an = new AssemblyName(typeSignature);
            AssemblyBuilder assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(an, AssemblyBuilderAccess.Run);
            ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule("MainModule");
            TypeBuilder tb = moduleBuilder.DefineType(typeSignature
                                , TypeAttributes.Public |
                                TypeAttributes.Class |
                                TypeAttributes.AutoClass |
                                TypeAttributes.AnsiClass |
                                TypeAttributes.BeforeFieldInit |
                                TypeAttributes.AutoLayout
                                , null);
            return tb;
        }

        public static Scenario BuildScenario(Type optionsType, object options)
        {
            var scenarioType = ScenarioTypes.FirstOrDefault(st => st.Name.StartsWith(GetVerbName(optionsType, skipAttribute: true)));
            if (scenarioType != null)
            {
                var baseOptions = options as BaseAbstractOptions;
                TraceWriter tracer = null;
                if (string.IsNullOrEmpty(baseOptions?.LogFile))
                {
                    tracer = new ConsoleTracer(TraceLevel.Info);
                }
                else
                {
                    tracer = new FileTracer(TraceLevel.Info, baseOptions.LogFile);
                }
                return Activator.CreateInstance(scenarioType, new[] { options, tracer }) as Scenario;
            }
            else
            {
                throw new Exception("Error");
            }
        }

        public static IEnumerable<Tuple<string, Type>> Verbs
        {
            get
            {
                return BaseOptionsTypes.Select(t => Tuple.Create(GetVerbName(t), t));
            }
        }

        private static void CreateVerbProperty(TypeBuilder tb, string propertyName, Type propertyType)
        {
            var fieldBuilder = tb.DefineField("_" + propertyName, propertyType, FieldAttributes.Private);
            var propertyBuilder = tb.DefineProperty(propertyName, PropertyAttributes.HasDefault, propertyType, null);
            var getPropMthdBldr = tb.DefineMethod("get_" + propertyName, MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig, propertyType, Type.EmptyTypes);
            var getIl = getPropMthdBldr.GetILGenerator();

            getIl.Emit(OpCodes.Ldarg_0);
            getIl.Emit(OpCodes.Ldfld, fieldBuilder);
            getIl.Emit(OpCodes.Ret);

            var setPropMthdBldr =
                tb.DefineMethod("set_" + propertyName,
                  MethodAttributes.Public |
                  MethodAttributes.SpecialName |
                  MethodAttributes.HideBySig,
                  null, new[] { propertyType });

            var setIl = setPropMthdBldr.GetILGenerator();
            var modifyProperty = setIl.DefineLabel();
            var exitSet = setIl.DefineLabel();

            setIl.MarkLabel(modifyProperty);
            setIl.Emit(OpCodes.Ldarg_0);
            setIl.Emit(OpCodes.Ldarg_1);
            setIl.Emit(OpCodes.Stfld, fieldBuilder);

            setIl.Emit(OpCodes.Nop);
            setIl.MarkLabel(exitSet);
            setIl.Emit(OpCodes.Ret);

            var attributeBuilder = new CustomAttributeBuilder(VerbOptionAttributeCtor, new[] { GetVerbName(propertyType) });

            propertyBuilder.SetGetMethod(getPropMthdBldr);
            propertyBuilder.SetSetMethod(setPropMthdBldr);
            propertyBuilder.SetCustomAttribute(attributeBuilder);
        }

        private static string GetVerbName(Type propertyType, bool skipAttribute = false)
        {
            Func<string> parseName = () => 
                propertyType.Name.Substring(0, propertyType.Name.LastIndexOf("VerbOptions", StringComparison.OrdinalIgnoreCase));

            if (skipAttribute)
            {
                return parseName();
            }
            var verbNameAttribute = propertyType.GetCustomAttribute<VerbNameAttribute>();
            return verbNameAttribute?.Name ?? parseName();
        }
    }
}
