using CommandLine;
using Microsoft.Azure.WebJobs.Host;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using WebJobs.Script.ConsoleHost.Extensions;
using WebJobs.Script.ConsoleHost.Common;
using System.Diagnostics;
using WebJobs.Script.ConsoleHost.Commands;
using CommandLine.Text;

namespace WebJobs.Script.ConsoleHost
{
    public static class CommandLineOptionsBuilder
    {
        public static readonly ConstructorInfo VerbOptionAttributeCtor = typeof(VerbOptionAttribute).GetConstructor(new[] { typeof(string) });
        public static readonly ConstructorInfo HelpVerbOptionAttributeCtor = typeof(HelpVerbOptionAttribute).GetConstructor(Array.Empty<Type>());
        public static readonly IEnumerable<Type> CommandTypes = typeof(Command).GetImplementingTypes().Where(t => t.GetCustomAttributes(typeof(IgnoreCommandAttribute)).FirstOrDefault() == null);
        private static AssemblyBuilder _assemblyBuilder;

        public static object CreateObject()
        {
            return Activator.CreateInstance(GetCommandLineOptionType());
        }

        // http://stackoverflow.com/a/3862241
        private static Type GetCommandLineOptionType()
        {
            TypeBuilder tb = GetTypeBuilder();
            ConstructorBuilder constructor = tb.DefineDefaultConstructor(MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName);

            // NOTE: assuming your list contains Field objects with fields FieldName(string) and FieldType(Type)
            foreach (var propertyType in CommandTypes)
                CreateVerbProperty(tb, propertyType.Name, propertyType);

            //CreateHelpFunction(tb);
            Type objectType = tb.CreateType();
            return objectType;
        }

        private static TypeBuilder GetTypeBuilder()
        {
            var typeSignature = "CommandLineOptionsAutoGeneratedType";
            var an = new AssemblyName(typeSignature);
            _assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(an, AssemblyBuilderAccess.RunAndSave);
            ModuleBuilder moduleBuilder = _assemblyBuilder.DefineDynamicModule("MainModule");
            TypeBuilder tb = moduleBuilder.DefineType(typeSignature
                                , TypeAttributes.Public |
                                TypeAttributes.Class |
                                TypeAttributes.AutoClass |
                                TypeAttributes.AnsiClass |
                                TypeAttributes.BeforeFieldInit |
                                TypeAttributes.AutoLayout
                                , null);
            return tb;
        }

        private static void CreateVerbProperty(TypeBuilder tb, string propertyName, Type propertyType)
        {
            var fieldBuilder = tb.DefineField("_" + propertyName, propertyType, FieldAttributes.Private);
            var propertyBuilder = tb.DefineProperty(propertyName, PropertyAttributes.HasDefault, propertyType, null);
            var getPropMthdBldr = tb.DefineMethod("get_" + propertyName, MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig, propertyType, Type.EmptyTypes);
            var getIl = getPropMthdBldr.GetILGenerator();

            getIl.Emit(OpCodes.Ldarg_0);
            getIl.Emit(OpCodes.Ldfld, fieldBuilder);
            getIl.Emit(OpCodes.Ret);

            var setPropMthdBldr =
                tb.DefineMethod("set_" + propertyName,
                  MethodAttributes.Public |
                  MethodAttributes.SpecialName |
                  MethodAttributes.HideBySig,
                  null, new[] { propertyType });

            var setIl = setPropMthdBldr.GetILGenerator();
            var modifyProperty = setIl.DefineLabel();
            var exitSet = setIl.DefineLabel();

            setIl.MarkLabel(modifyProperty);
            setIl.Emit(OpCodes.Ldarg_0);
            setIl.Emit(OpCodes.Ldarg_1);
            setIl.Emit(OpCodes.Stfld, fieldBuilder);

            setIl.Emit(OpCodes.Nop);
            setIl.MarkLabel(exitSet);
            setIl.Emit(OpCodes.Ret);


            var attributeBuilder = new CustomAttributeBuilder(VerbOptionAttributeCtor, new[] { GetVerbName(propertyType).ToLowerInvariant() });

            propertyBuilder.SetGetMethod(getPropMthdBldr);
            propertyBuilder.SetSetMethod(setPropMthdBldr);
            propertyBuilder.SetCustomAttribute(attributeBuilder);
        }

        private static string GetVerbName(Type propertyType)
        {
            return propertyType.GetCustomAttribute<CommandNameAttribute>()?.Name ??
                propertyType.Name.Substring(0, propertyType.Name.LastIndexOf(nameof(Command), StringComparison.OrdinalIgnoreCase)); ;
        }
    }
}
