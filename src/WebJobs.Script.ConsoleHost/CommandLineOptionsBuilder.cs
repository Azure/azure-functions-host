using CommandLine;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using WebJobs.Script.ConsoleHost.Extensions;
using WebJobs.Script.ConsoleHost.Common;
using WebJobs.Script.ConsoleHost.Commands;

namespace WebJobs.Script.ConsoleHost
{
    public static class CommandLineOptionsBuilder
    {
        public static readonly ConstructorInfo VerbOptionAttributeCtor = typeof(VerbOptionAttribute).GetConstructor(new[] { typeof(string) });
        public static readonly ConstructorInfo HelpVerbOptionAttributeCtor = typeof(HelpVerbOptionAttribute).GetConstructor(Array.Empty<Type>());
        public static readonly IEnumerable<Type> CommandTypes = typeof(Command).GetImplementingTypes().Where(t => t.GetCustomAttributes(typeof(IgnoreCommandAttribute)).FirstOrDefault() == null);

        public static object CreateObject()
        {
            return Activator.CreateInstance(GetCommandLineOptionType());
        }

        // http://stackoverflow.com/a/3862241
        private static Type GetCommandLineOptionType()
        {
            var tb = GetTypeBuilder();

            foreach (var commandType in CommandTypes)
            {
                CreateVerbProperty(tb, commandType);
            }

            return tb.CreateType();
        }

        private static TypeBuilder GetTypeBuilder()
        {
            var typeSignature = "CommandLineOptionsAutoGeneratedType";
            var an = new AssemblyName(typeSignature);
            var assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(an, AssemblyBuilderAccess.RunAndSave);
            ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule("MainModule");
            TypeBuilder tb = moduleBuilder.DefineType(typeSignature,
                                TypeAttributes.Public |
                                TypeAttributes.Class |
                                TypeAttributes.AutoClass |
                                TypeAttributes.AnsiClass |
                                TypeAttributes.BeforeFieldInit |
                                TypeAttributes.AutoLayout,
                                null);
            return tb;
        }

        private static void CreateVerbProperty(TypeBuilder tb, Type propertyType)
        {
            var verbs = GetVerbNames(propertyType);
            foreach (var verb in GetVerbNames(propertyType))
            {
                var fieldBuilder = tb.DefineField("_" + verb, propertyType, FieldAttributes.Private);
                var propertyBuilder = tb.DefineProperty(verb, PropertyAttributes.HasDefault, propertyType, null);
                var getPropMthdBldr = tb.DefineMethod("get_" + verb, MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig, propertyType, Type.EmptyTypes);
                var getIl = getPropMthdBldr.GetILGenerator();

                getIl.Emit(OpCodes.Ldarg_0);
                getIl.Emit(OpCodes.Ldfld, fieldBuilder);
                getIl.Emit(OpCodes.Ret);

                var setPropMthdBldr =
                    tb.DefineMethod("set_" + verb,
                      MethodAttributes.Public |
                      MethodAttributes.SpecialName |
                      MethodAttributes.HideBySig,
                      null, new[] { propertyType });

                var setIl = setPropMthdBldr.GetILGenerator();
                var modifyProperty = setIl.DefineLabel();
                var exitSet = setIl.DefineLabel();

                setIl.MarkLabel(modifyProperty);
                setIl.Emit(OpCodes.Ldarg_0);
                setIl.Emit(OpCodes.Ldarg_1);
                setIl.Emit(OpCodes.Stfld, fieldBuilder);

                setIl.Emit(OpCodes.Nop);
                setIl.MarkLabel(exitSet);
                setIl.Emit(OpCodes.Ret);


                var attributeBuilder = new CustomAttributeBuilder(VerbOptionAttributeCtor, new[] { verb });
                propertyBuilder.SetGetMethod(getPropMthdBldr);
                propertyBuilder.SetSetMethod(setPropMthdBldr);
                propertyBuilder.SetCustomAttribute(attributeBuilder);
            }
        }

        private static IEnumerable<string> GetVerbNames(Type propertyType)
        {
            var commandNameAttribute = propertyType.GetCustomAttribute<CommandNamesAttribute>();
            if (commandNameAttribute?.Names?.Length > 0)
            {
                foreach(var name in commandNameAttribute.Names)
                {
                    yield return name.ToLowerInvariant();
                }
            }
            else
            {
                yield return propertyType.Name.Substring(0, propertyType.Name.LastIndexOf(nameof(Command), StringComparison.OrdinalIgnoreCase)).ToLowerInvariant();
            }
        }
    }
}
