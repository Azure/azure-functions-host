// <auto-generated>
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using Grpc.Core;
using Microsoft.Azure.WebJobs.Script.Rpc.Messages;
using Microsoft.Azure.WebJobs.Host;
using Microsoft.Azure.WebJobs.Script.Description;

namespace Microsoft.Azure.WebJobs.Script.Rpc
{
    public class GoogleRpc : IRpc
    {
        private Process _dotnetRpcWorker;

        private Process _nodeRpcWorker;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        private GoogleRpcClient _googleRpcDotNetClient;

        private Channel _googleRpcDotNetClientChannel;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        private GoogleRpcClient _googleRpcNodeClient;

        private Channel _googleRpcNodeClientChannel;

        public GoogleRpc()
        {
            // DotNet
            _googleRpcDotNetClientChannel = new Channel($"{RpcConstants.RpcWorkerHost}:{RpcConstants.DotNetRpcWorkerPort}", ChannelCredentials.Insecure);
            _googleRpcDotNetClient = new GoogleRpcClient(new FunctionRpc.FunctionRpcClient(_googleRpcDotNetClientChannel));

            // node
            _googleRpcNodeClientChannel = new Channel($"{RpcConstants.RpcWorkerHost}:{RpcConstants.NodeRpcWorkerPort}", ChannelCredentials.Insecure);
            _googleRpcNodeClient = new GoogleRpcClient(new FunctionRpc.FunctionRpcClient(_googleRpcNodeClientChannel));
        }

        public string GetRpcProvider()
        {
            return RpcConstants.GoogleRpc;
        }

        public Task<LanguageInvokerInitializationResult> SetupNodeRpcWorker(TraceWriter systemTraceWriter)
        {
            // Any setup needed for GRPC
            // systemTraceWriter.Info("SetupNodeRpcWorker...");
            bool tcpEndpointAvailable = Utilities.IsTcpEndpointAvailable(RpcConstants.RpcWorkerHost, RpcConstants.NodeRpcWorkerPort, systemTraceWriter);
            if (!tcpEndpointAvailable)
            {
                // string fileName = @"C:\Program Files (x86)\nodejs\node.exe";
                // on Azure
                string fileName = @"node.exe";

                // string arguments = @" E:\FuncLang\grpc\examples\node\dynamic_codegen\route_guide\nodeRpcWorker.js";
                // on Azure
                string arguments = @"D:\home\SiteExtensions\Functions\bin\nodejsWorker.js";
                _nodeRpcWorker = Utilities.StartProcess(fileName, arguments, Path.GetDirectoryName(arguments), systemTraceWriter);
            }
            tcpEndpointAvailable = Utilities.IsTcpEndpointAvailable(RpcConstants.RpcWorkerHost, RpcConstants.NodeRpcWorkerPort, systemTraceWriter);
            if (!tcpEndpointAvailable)
            {
                throw new InvalidOperationException($"Unable to start NodeRpcWorker");
            }
            LanguageInvokerInitializationResult initResult = new LanguageInvokerInitializationResult();
            initResult.LanguageServiceCapability = new Dictionary<string, string>();
            initResult.LanguageServiceCapability.Add("Lang", "node");

            return Task.FromResult(initResult);
        }

        public Task<LanguageInvokerInitializationResult> SetupDotNetRpcWorker(TraceWriter systemTraceWriter)
        {
            Console.WriteLine("SetupDotNetRpcWorker...");
            bool tcpEndpointAvailable = Utilities.IsTcpEndpointAvailable(RpcConstants.RpcWorkerHost, RpcConstants.DotNetRpcWorkerPort, systemTraceWriter);
            if (!tcpEndpointAvailable)
            {
                string fileName = @"E:\pgopaGit\azure-webjobs-sdk-script\src\RpcDotNetWorker\bin\Debug\RpcDotNetWorker.exe";
                _dotnetRpcWorker = Utilities.StartProcess(fileName, null, Path.GetDirectoryName(fileName), systemTraceWriter);
            }
            tcpEndpointAvailable = Utilities.IsTcpEndpointAvailable(RpcConstants.RpcWorkerHost, RpcConstants.DotNetRpcWorkerPort, systemTraceWriter);
            if (!tcpEndpointAvailable)
            {
                // throw new InvalidOperationException($"Unable to start DotNetRpcWorker");
            }
            LanguageInvokerInitializationResult initResult = new LanguageInvokerInitializationResult();
            initResult.LanguageServiceCapability = new Dictionary<string, string>();
            initResult.LanguageServiceCapability.Add("Lang", "dotNet");

            return Task.FromResult(initResult);
        }

        public Task KillRpcWorkers()
        {
            Utilities.KillProcess(_dotnetRpcWorker);
            Utilities.KillProcess(_nodeRpcWorker);
            throw new NotImplementedException();
        }

        public Task<object> SendMessageToRpcWorker(ScriptType scriptType, string scriptFilePath, object[] parameters, FunctionInvocationContext context, Dictionary<string, object> scriptExecutionContext)
        {
            SetupNodeRpcWorker((TraceWriter)scriptExecutionContext["systemTraceWriter"]);
            switch (scriptType)
            {
            // case ScriptType.Javascript:
            //        return _googleRpcNodeClient.InvokeFunction(scriptFilePath, parameters, context, scriptExecutionContext);
            // case ScriptType.CSharp:
            //        return _googleRpcDotNetClient.InvokeFunction(scriptFilePath, parameters, context, scriptExecutionContext);
                default:
                    throw new NotImplementedException();
            }
        }
    }
}
