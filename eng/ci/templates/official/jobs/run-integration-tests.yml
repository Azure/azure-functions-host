parameters:
  - name: isReleaseBranch
    type: boolean
    default: false

variables:
  IntegrationProject: 'test/WebJobs.Script.Tests.Integration.csproj'

jobs:
- job: RunIntegrationTests

  steps:
  - template: /eng/ci/templates/install-dotnet.yml@self

  - task: UseNode@1
    inputs:
      version: '14.x'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7.x'
      addToPath: true

  - task: JavaToolInstaller@0
    inputs:
      versionSpec: '11'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'

  - task: PowerShell@2
    displayName: 'Install Az.Storage Powershell module'
    inputs:
      targetType: 'inline'
      script: 'Install-Module -Name Az.Storage -RequiredVersion 1.11.0 -Scope CurrentUser -Force -AllowClobber'

  - task: Npm@1
    displayName: 'npm ci'
    inputs:
      command: ci
      workingDir: $(Build.SourcesDirectory)/sample/CustomHandlerRetry

  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: 'azure-functions-host-ci'
      secretsFilter: '*'

  - task: PowerShell@2
    displayName: 'Checkout secrets'
    inputs:
      filePath: '$(Build.SourcesDirectory)/build/checkout-secrets.ps1'
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'''

  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: azure-functions-host-$(LeaseBlob)
      secretsFilter: '*'

  - task: PowerShell@2
    displayName: 'Set environment variables'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "##vso[task.setvariable variable=AzureWebJobsStorage]$env:AzureWebJobsStorageSecretMap"
        Write-Host "##vso[task.setvariable variable=AzureWebJobsSeconaryStorage]$env:AzureWebJobsSecondaryStorageSecretMap"
        Write-Host "##vso[task.setvariable variable=ConnectionStrings__CosmosDB]$env:CosmosDbSecretMap"
        Write-Host "##vso[task.setvariable variable=AzureWebJobsEventHubSender]$env:AzureWebJobsEventHubSenderSecretMap"
        Write-Host "##vso[task.setvariable variable=AzureWebJobsEventHubReceiver]$env:AzureWebJobsEventHubReceiverSecretMap"
    env:
      AzureWebJobsStorageSecretMap: $(Storage)
      AzureWebJobsSecondaryStorageSecretMap: $(SecondaryStorage)
      CosmosDbSecretMap: $(CosmosDb)
      AzureWebJobsEventHubSenderSecretMap: $(EventHub)
      AzureWebJobsEventHubReceiverSecretMap: $(EventHub)

  - task: DotNetCoreCLI@2
    displayName: "Build Integration.csproj"
    inputs:
      command: 'build'
      projects: $(IntegrationProject)

  - task: DotNetCoreCLI@2
    displayName: "C# end to end tests"
    inputs:
      command: 'test'
      testRunTitle: "C# end to end tests"
      arguments: '--filter "Group=CSharpEndToEndTests" --no-build'
      projects: $(IntegrationProject)

  - task: DotNetCoreCLI@2
    displayName: "Node end to end tests"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Node end to end tests"
      arguments: '--filter "Group=NodeEndToEndTests" --no-build'
      projects: $(IntegrationProject)

  - task: DotNetCoreCLI@2
    displayName: "Direct load end to end tests"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Direct load end to end tests"
      arguments: '--filter "Group=DirectLoadEndToEndTests" --no-build'
      projects: $(IntegrationProject)

  - task: DotNetCoreCLI@2
    displayName: "F# end to end tests"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "F# end to end tests"
      arguments: '--filter "Group=FSharpEndToEndTests" --no-build'
      projects: $(IntegrationProject)

  - task: DotNetCoreCLI@2
    displayName: "Language worker end to end tests"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Language worker end to end tests"
      arguments: '--filter "Group=LanguageWorkerSelectionEndToEndTests" --no-build'
      projects: $(IntegrationProject)

  - task: DotNetCoreCLI@2
    displayName: "Node script host end to end tests"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Node script host end to end tests"
      arguments: '--filter "Group=NodeScriptHostTests" --no-build'
      projects: $(IntegrationProject)

  - task: DotNetCoreCLI@2
    displayName: "Raw assembly end to end tests"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Raw assembly end to end tests"
      arguments: '--filter "Group=RawAssemblyEndToEndTests" --no-build'
      projects: $(IntegrationProject)

  - task: DotNetCoreCLI@2
    displayName: "Samples end to end tests"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Samples end to end tests"
      arguments: '--filter "Group=SamplesEndToEndTests" --no-build'
      projects: $(IntegrationProject)

  - task: DotNetCoreCLI@2
    displayName: "Drain mode end to end tests"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Drain mode end to end tests"
      arguments: '--filter "Group=DrainModeEndToEndTests" --no-build'
      projects: $(IntegrationProject)
  
  - task: DotNetCoreCLI@2
    displayName: "Standby mode end to end tests Windows"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Standby mode end to end tests Windows"
      arguments: '--filter "Group=StandbyModeEndToEndTests_Windows" --no-build'
      projects: $(IntegrationProject)
  
  - task: DotNetCoreCLI@2
    displayName: "Standby mode end to end tests Linux"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Standby mode end to end tests Linux"
      arguments: '--filter "Group=StandbyModeEndToEndTests_Linux" --no-build'
      projects: $(IntegrationProject)

  - task: DotNetCoreCLI@2
    displayName: "Linux container end to end tests Windows"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Linux container end to end tests Windows"
      arguments: '--filter "Group=ContainerInstanceTests" --no-build'
      projects: $(IntegrationProject)

  - task: DotNetCoreCLI@2
    displayName: "Release verification tests"
    condition: ${{ eq(parameters.isReleaseBranch, true) }}
    inputs:
      command: 'test'
      testRunTitle: "Release verification tests"
      arguments: '--filter "Group=ReleaseTests" --no-build'
      projects: $(IntegrationProject)

  - task: PowerShell@2
    condition: always()
    displayName: 'Checkin secrets'
    inputs:
      filePath: '$(Build.SourcesDirectory)/build/checkin-secrets.ps1'
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'' -leaseBlob $(LeaseBlob) -leaseToken $(LeaseToken)'
  