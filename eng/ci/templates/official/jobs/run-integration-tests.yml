jobs:
- job: RunIntegrationTests
  displayName: Run Integration Tests

  pool:
    name: 1es-pool-azfunc-large
    image: 1es-windows-2022
    os: windows

  variables:
    test_projects: test/WebJobs.Script.Tests.Integration/WebJobs.Script.Tests.Integration.csproj
    is_release: $[contains(variables['Build.SourceBranch'], 'release/')]
    test_args: -c release --no-build
    log_dir: $(Build.ArtifactStagingDirectory)/log

  templateContext:
    outputParentDirectory: $(Build.ArtifactStagingDirectory)
    outputs:
    - output: pipelineArtifact
      displayName: Publish logs
      path: $(log_dir)
      artifact: Integration_Test_Log
      sbomEnabled: false
      condition: always()

  steps:
  - template: /eng/ci/templates/install-dotnet.yml@self

  - task: UseNode@1
    inputs:
      version: 14.x

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true

  - task: JavaToolInstaller@0
    inputs:
      versionSpec: '11'
      jdkArchitectureOption: x64
      jdkSourceOption: PreInstalled

  - task: PowerShell@2
    displayName: Install Az.Storage Powershell module
    inputs:
      targetType: inline
      script: 'Install-Module -Name Az.Storage -RequiredVersion 1.11.0 -Scope CurrentUser -Force -AllowClobber'

  - task: Npm@1
    displayName: npm ci
    inputs:
      command: ci
      workingDir: sample/CustomHandlerRetry

  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: Azure-Functions-Host-CI-internal
      keyVaultName: azure-functions-host-ci
      secretsFilter: '*'

  - task: PowerShell@2
    displayName: Checkout secrets
    inputs:
      filePath: build/checkout-secrets.ps1
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'''

  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: Azure-Functions-Host-CI-internal
      keyVaultName: azure-functions-host-$(LeaseBlob)
      secretsFilter: '*'

  - task: PowerShell@2
    displayName: Set environment variables
    inputs:
      targetType: inline
      script: |
        Write-Host "##vso[task.setvariable variable=AzureWebJobsStorage]$env:AzureWebJobsStorageSecretMap"
        Write-Host "##vso[task.setvariable variable=AzureWebJobsSeconaryStorage]$env:AzureWebJobsSecondaryStorageSecretMap"
        Write-Host "##vso[task.setvariable variable=ConnectionStrings__CosmosDB]$env:CosmosDbSecretMap"
        Write-Host "##vso[task.setvariable variable=AzureWebJobsEventHubSender]$env:AzureWebJobsEventHubSenderSecretMap"
        Write-Host "##vso[task.setvariable variable=AzureWebJobsEventHubReceiver]$env:AzureWebJobsEventHubReceiverSecretMap"
    env:
      AzureWebJobsStorageSecretMap: $(Storage)
      AzureWebJobsSecondaryStorageSecretMap: $(SecondaryStorage)
      CosmosDbSecretMap: $(CosmosDb)
      AzureWebJobsEventHubSenderSecretMap: $(EventHub)
      AzureWebJobsEventHubReceiverSecretMap: $(EventHub)

  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: custom
      custom: restore
      arguments: -v m -bl:$(log_dir)/restore.binlog
      projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      arguments: -v m -c release --no-restore -bl:$(log_dir)/build.binlog
      projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: C# end to end tests
    inputs:
      command: test
      testRunTitle: C# end to end tests
      arguments: '--filter "Group=CSharpEndToEndTests" $(test_args)'
      projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: Node end to end tests
    condition: succeededOrFailed()
    inputs:
      command: test
      testRunTitle: Node end to end tests
      arguments: '--filter "Group=NodeEndToEndTests" $(test_args)'
      projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: Direct load end to end tests
    condition: succeededOrFailed()
    inputs:
      command: test
      testRunTitle: Direct load end to end tests
      arguments: '--filter "Group=DirectLoadEndToEndTests" $(test_args)'
      projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: F# end to end tests
    condition: succeededOrFailed()
    inputs:
      command: test
      testRunTitle: F# end to end tests
      arguments: '--filter "Group=FSharpEndToEndTests" $(test_args)'
      projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: Language worker end to end tests
    condition: succeededOrFailed()
    inputs:
      command: test
      testRunTitle: Language worker end to end tests
      arguments: '--filter "Group=LanguageWorkerSelectionEndToEndTests" $(test_args)'
      projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: Node script host end to end tests
    condition: succeededOrFailed()
    inputs:
      command: test
      testRunTitle: Node script host end to end tests
      arguments: '--filter "Group=NodeScriptHostTests" $(test_args)'
      projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: Raw assembly end to end tests
    condition: succeededOrFailed()
    inputs:
      command: test
      testRunTitle: Raw assembly end to end tests
      arguments: '--filter "Group=RawAssemblyEndToEndTests" $(test_args)'
      projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: Samples end to end tests
    condition: succeededOrFailed()
    inputs:
      command: test
      testRunTitle: Samples end to end tests
      arguments: '--filter "Group=SamplesEndToEndTests" $(test_args)'
      projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: Drain mode end to end tests
    condition: succeededOrFailed()
    inputs:
      command: test
      testRunTitle: Drain mode end to end tests
      arguments: '--filter "Group=DrainModeEndToEndTests" $(test_args)'
      projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: Standby mode end to end tests Windows
    condition: succeededOrFailed()
    inputs:
      command: test
      testRunTitle: Standby mode end to end tests Windows
      arguments: '--filter "Group=StandbyModeEndToEndTests_Windows" $(test_args)'
      projects: $(test_projects)

  # Disabled to unblock in 202401. Will fix shortly.
  # - task: DotNetCoreCLI@2
  #   displayName: Standby mode end to end tests Linux
  #   condition: succeededOrFailed()
  #   inputs:
  #     command: test
  #     testRunTitle: Standby mode end to end tests Linux
  #     arguments: '--filter "Group=StandbyModeEndToEndTests_Linux" $(test_args)'
  #     projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: Linux container end to end tests Windows
    condition: succeededOrFailed()
    inputs:
      command: test
      testRunTitle: Linux container end to end tests Windows
      arguments: '--filter "Group=ContainerInstanceTests" $(test_args)'
      projects: $(test_projects)

  - task: DotNetCoreCLI@2
    displayName: Release verification tests
    condition: ${{ eq(variables.is_release, true) }}
    inputs:
      command: test
      testRunTitle: Release verification tests
      arguments: '--filter "Group=ReleaseTests" $(test_args)'
      projects: $(test_projects)

  - task: PowerShell@2
    condition: always()
    displayName: Checkin secrets
    inputs:
      filePath: build/checkin-secrets.ps1
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'' -leaseBlob $(LeaseBlob) -leaseToken $(LeaseToken)'
