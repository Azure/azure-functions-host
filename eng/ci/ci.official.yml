name: azfunc-host-ci-official

variables:
  buildNumber: $[ counter('constant', 13000) ] # TODO: new pipeline, 13000 no longer valid.
  isReleaseBranch: $[contains(variables['Build.SourceBranch'], 'release/')]
  ${{ if contains(variables['Build.SourceBranch'], 'release/inproc6/') }}:
    minorVersionPrefix: "6"
  ${{ elseif contains(variables['Build.SourceBranch'], 'release/inproc8/') }}:
    minorVersionPrefix: "8"
  ${{ else }}:
    minorVersionPrefix: ""
  DOTNET_NOLOGO: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

trigger:
  batch: true
  branches:
    include:
    - release/4.*
    - release/inproc6/4.*
    - release/inproc8/4.*

# CI only, does not trigger on PRs.
pr: none

resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    pool:
      name: 1ES-Hosted-AzFunc  # Name of your hosted pool
      image: MMS2019TLS  # Name of the image in your pool. If not specified, first image of the pool is used
      os: windows  # OS of the image. This value cannot be a variable. Allowed values: windows, linux, macOS

    stages:
    - stage: Build
      jobs:
      - job: InitializePipeline
        steps:
        - task: UseDotNet@2 # The pinned SDK we use to build
          displayName: 'Install .NET SDK from global.json'
          inputs:
            packageType: sdk
            useGlobalJson: true
        - task: PowerShell@2
          displayName: 'Initialize'
          name: Initialize
          inputs:
            filePath: '$(Build.SourcesDirectory)/build/initialize-pipeline.ps1'
            arguments: -minorVersionPrefix "$(minorVersionPrefix)"
            showWarnings: true
            pwsh: true

      - job: BuildArtifacts
        templateContext:
          outputParentDirectory: $(Build.ArtifactStagingDirectory)
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.ArtifactStagingDirectory)/Samples
            artifactName: SiteExtension

        variables:
            ${{ if or( eq( variables['Build.Reason'], 'PullRequest' ), and( not( contains( variables['Build.SourceBranch'], 'release/inproc6/4.' ) ), not( contains( variables['Build.SourceBranch'], 'release/inproc8/4.' ) ), not( contains( variables['Build.SourceBranch'], 'release/4.' ) ), not( contains( variables['Build.SourceBranch'], 'release/ExtensionsMetadataGenerator/' ) ) ) ) }}:
              suffixTemp: $(buildNumber)
              packSuffixSwitchTemp: --version-suffix $(buildNumber)
              emgSuffixSwitchTemp: --version-suffix ci$(buildNumber)
            suffix: $[variables.suffixTemp] # this resolves to an empty string if it is missing
            packSuffixSwitch: $[variables.packSuffixSwitchTemp]
            emgSuffixSwitch: $[variables.emgSuffixSwitchTemp]

        steps:
        - template: /eng/ci/templates/install-dotnet.yml

        - task: PowerShell@2
          displayName: "Build artifacts"
          inputs:
            filePath: '$(Build.SourcesDirectory)build\build-extensions.ps1'
            arguments: '-buildNumber "$(buildNumber)" -suffix "$(suffix)" -minorVersionPrefix "$(minorVersionPrefix)"'

        - task: PowerShell@2
          displayName: "Check for security vulnerabilities"
          inputs:
            filePath: '$(Build.SourcesDirectory)/build/check-vulnerabilities.ps1'
        
        - task: PowerShell@2
          condition: eq(variables['RUNBUILDFORINTEGRATIONTESTS'], 'True')
          displayName: "Update host references"
          inputs:
            filePath: '$(Build.SourcesDirectory)/build/update-hostreferences.ps1'

        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/out/pub/WebJobs.Script.WebHost'
            Contents: '**/*.zip'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: DotNetCoreCLI@2
          displayName: 'Build host packages'
          inputs:
            command: 'custom'
            custom: 'pack'
            arguments: -p:BuildNumber=$(buildNumber) -c Release $(packSuffixSwitch)
            projects: |
              **\WebJobs.Script.csproj
              **\WebJobs.Script.WebHost.csproj
              **\WebJobs.Script.Grpc.csproj
        
        - pwsh: |
            foreach ($baseName in @("WebJobs.Script", "WebJobs.Script.WebHost", "WebJobs.Script.Grpc"))
            {
              $packageName = "Microsoft.Azure." + $baseName + "*.nupkg"
              $sourcePath = "$(Build.Repository.LocalPath)/out/pkg/release/$packageName"
              if (-not (test-path $sourcePath))
              {
                throw "Unable to find '$packageName' at './package'"
              }
              Copy-Item -Path $sourcePath -Destination $(Build.ArtifactStagingDirectory) -ErrorAction Stop -Verbose -Force}
          condition: eq(variables['RUNBUILDFORINTEGRATIONTESTS'], 'True')
          displayName: 'Copy package to ArtifactStagingDirectory'