name: $(Build.Reason)_$(Build.BuildId)

pr:
  branches:
    include:
    - v3.x
    - release/3.0

trigger:
  branches:
    include:
    - v3.x
    - release/3.0

jobs:
- job: InitializePipeline
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: 'azure-functions-host-ci'
      secretsFilter: '*'
  - task: PowerShell@2
    displayName: 'Initialize'
    name: Initialize
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\initialize-pipeline.ps1'
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'''

- job: BuildArtifacts
  dependsOn: InitializePipeline
  condition: and(succeeded(), or(ne(variables['Build.Reason'], 'PullRequest'), eq(dependencies.InitializePipeline.outputs['Initialize.BuildArtifacts'], true)))
  variables:
    suffix: $[ dependencies.InitializePipeline.outputs['Initialize.Suffix'] ]
    emgSuffix: $[ dependencies.InitializePipeline.outputs['Initialize.EmgSuffix'] ]
  pool:
    vmImage: 'windows-2019' 
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.1.x'
      performMultiLevelLookup: true
  - task: PowerShell@2
    displayName: "Build artifacts"
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\build-extensions.ps1'
      arguments: '-buildNumber "$(Build.BuildId)" -suffix "$(suffix)"'
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)\buildoutput'
      Contents: '*.zip'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: DotNetCoreCLI@2
    displayName: 'Build host packages'
    inputs:
      command: 'custom'
      custom: 'pack'
      arguments: '-o packages -p:BuildNumber=$(Build.BuildId) -p:CommitHash=$(Build.SourceVersion) --version-suffix $(suffix) -c Release'
      projects: |
        **\WebJobs.Script.csproj
        **\WebJobs.Script.WebHost.csproj
        **\WebJobs.Script.Grpc.csproj
  - task: DotNetCoreCLI@2
    displayName: 'Build performance package'
    inputs:
      command: 'custom'
      custom: 'pack'
      arguments: '-o packages'
      projects: |
        **\WebJobs.Script.Performance.App.csproj
  - task: DotNetCoreCLI@2
    displayName: 'Build ExtensionsMetadataGenerator'
    inputs:
      command: 'build'      
      arguments: '-c Release -p:CommitHash=$(Build.SourceVersion)'
      projects: |
        **\ExtensionsMetadataGenerator.csproj
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'ESRP CodeSigning: Strong Name and Authenticode'
    inputs:
      ConnectedServiceName: 'ESRP Service'
      FolderPath: 'tools\ExtensionsMetadataGenerator\src\ExtensionsMetadataGenerator\bin\Release'
      Pattern: Microsoft.Azure.WebJobs.Script.ExtensionsMetadataGenerator*.dll
      signConfigType: inlineSignParams
      inlineOperation: |
        [
          {
              "KeyCode" : "CP-233863-SN",
              "OperationCode" : "StrongNameSign",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          },
          {
              "KeyCode" : "CP-233863-SN",
              "OperationCode" : "StrongNameVerify",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          },
          {
            "KeyCode": "CP-230012",
            "OperationCode": "SigntoolSign",
            "Parameters": {
              "OpusName": "Microsoft",
              "OpusInfo": "http://www.microsoft.com",
              "FileDigest": "/fd \"SHA256\"",
              "PageHash": "/NPH",
              "TimeStamp": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
            },
            "ToolName": "sign",
            "ToolVersion": "1.0"
          },
          {
            "KeyCode": "CP-230012",
            "OperationCode": "SigntoolVerify",
            "Parameters": {},
            "ToolName": "sign",
            "ToolVersion": "1.0"
          }
        ]
    condition: and(succeeded(), startsWith(variables['SignArtifacts'], 'true'))  
  - task: DeleteFiles@1
    displayName: 'Delete CodeSignSummary files'
    inputs:
      contents: '**\CodeSignSummary-*.md'
  - task: DotNetCoreCLI@2
    displayName: 'Pack ExtensionsMetadataGenerator package'
    inputs:
      command: 'custom'
      custom: 'pack'
      arguments: '--no-build -c Release -o packages --version-suffix $(emgSuffix)'
      projects: |
        **\ExtensionsMetadataGenerator.csproj
        steps:
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'ESRP CodeSigning: Nupkg'
    inputs:
      ConnectedServiceName: 'ESRP Service'
      FolderPath: 'packages'
      Pattern: 'Microsoft.Azure.WebJobs.Script.ExtensionsMetadataGenerator*.nupkg'
      signConfigType: inlineSignParams
      inlineOperation: |
       [
           {
             "KeyCode": "CP-401405",
             "OperationCode": "NuGetSign",
             "Parameters": {},
             "ToolName": "sign",
             "ToolVersion": "1.0"
           },
           {
             "KeyCode": "CP-401405",
             "OperationCode": "NuGetVerify",
             "Parameters": {},
             "ToolName": "sign",
             "ToolVersion": "1.0"
           }
       ]
    condition: and(succeeded(), startsWith(variables['SignArtifacts'], 'true'))
  - task: DeleteFiles@1
    displayName: 'Delete CodeSignSummary files'
    inputs:
      contents: '**\CodeSignSummary-*.md'
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: artifacts
  - publish: $(Build.Repository.LocalPath)\packages
    artifact: packages

- job: RunUnitTests
  dependsOn: InitializePipeline
  pool:
    vmImage: 'windows-2019'
  steps: 
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.1.x'
      performMultiLevelLookup: true
  - task: DotNetCoreCLI@2
    displayName: 'Unit Tests'
    inputs:
      command: 'test'
      testRunTitle: 'Unit Tests'
      arguments: '-v n'
      projects: |
        **\ExtensionsMetadataGeneratorTests.csproj
        **\WebJobs.Script.Scaling.Tests.csproj
        **\WebJobs.Script.Tests.csproj

- job: RunNonE2EIntegrationTests
  dependsOn: InitializePipeline
  pool:
    vmImage: 'windows-2019'
  variables:
    keyVaultSuffix: $[ dependencies.InitializePipeline.outputs['Initialize.LeaseBlob'] ]
  steps: 
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.1.x'
      performMultiLevelLookup: true
  - task: UseNode@1
    inputs:      
      version: '10.x'
  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: azure-functions-host-$(keyVaultSuffix)
      secretsFilter: '*'
  - task: DotNetCoreCLI@2
    displayName: 'Non-E2E integration tests'
    inputs:
      command: 'test'
      testRunTitle: 'Non-E2E integration tests'
      arguments: '--filter "Category!=E2E"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
    env:
      AzureWebJobsStorage: $(Storage)
      ConnectionStrings__CosmosDB: $(CosmosDB)
      AzureWebJobsEventHubSender: $(EventHub)
      AzureWebJobsEventHubReceiver: $(EventHub)
      AzureWebJobsSecretStorageKeyVaultConnectionString: $(KeyVaultConnectionString)
      AzureWebJobsSecretStorageKeyVaultName: $(KeyVaultName)

- job: RunIntegrationTests
  dependsOn: InitializePipeline
  pool:
    vmImage: 'windows-2019'
  variables:
    keyVaultSuffix: $[ dependencies.InitializePipeline.outputs['Initialize.LeaseBlob'] ]
  steps: 
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.1.x'
      performMultiLevelLookup: true
  - task: UseNode@1
    inputs:
      version: '10.x'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7.x'
      addToPath: true
  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: azure-functions-host-$(keyVaultSuffix)
      secretsFilter: '*'
  - task: PowerShell@2
    displayName: 'Set environment variables'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "##vso[task.setvariable variable=AzureWebJobsStorage]$env:AzureWebJobsStorageSecretMap"
        Write-Host "##vso[task.setvariable variable=ConnectionStrings__CosmosDB]$env:CosmosDbSecretMap"
        Write-Host "##vso[task.setvariable variable=AzureWebJobsEventHubSender]$env:AzureWebJobsEventHubSenderSecretMap"
        Write-Host "##vso[task.setvariable variable=AzureWebJobsEventHubReceiver]$env:AzureWebJobsEventHubReceiverSecretMap"
    env:
      AzureWebJobsStorageSecretMap: $(Storage)
      CosmosDbSecretMap: $(CosmosDb)
      AzureWebJobsEventHubSenderSecretMap: $(EventHub)
      AzureWebJobsEventHubReceiverSecretMap: $(EventHub)
  - task: DotNetCoreCLI@2
    displayName: "C# end to end tests"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "C# end to end tests"
      arguments: '--filter "Group=CSharpEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Node end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Node end to end tests"
      arguments: '--filter "Group=NodeEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Direct load end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Direct load end to end tests"
      arguments: '--filter "Group=DirectLoadEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "F# end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "F# end to end tests"
      arguments: '--filter "Group=FSharpEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Language worker end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Language worker end to end tests"
      arguments: '--filter "Group=LanguageWorkerSelectionEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Node script host end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Node script host end to end tests"
      arguments: '--filter "Group=NodeScriptHostTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Raw assembly end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Raw assembly end to end tests"
      arguments: '--filter "Group=RawAssemblyEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj                        
  - task: DotNetCoreCLI@2
    displayName: "Samples end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Samples end to end tests"
      arguments: '--filter "Group=SamplesEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Standby mode end to end tests Windows"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Standby mode end to end tests Windows"
      arguments: '--filter "Group=StandbyModeEndToEndTests_Windows"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Standby mode end to end tests Linux"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Standby mode end to end tests Linux"
      arguments: '--filter "Group=StandbyModeEndToEndTests_Linux"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Linux container end to end tests Windows"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Linux container end to end tests Windows"
      arguments: '--filter "Group=ContainerInstanceTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
        
- job: FinishPipeline
  dependsOn:
  - InitializePipeline
  - BuildArtifacts
  - RunUnitTests
  - RunIntegrationTests
  - RunNonE2EIntegrationTests
  condition: always()
  variables:
    leaseBlob: $[ dependencies.InitializePipeline.outputs['Initialize.LeaseBlob'] ]
    leaseToken: $[ dependencies.InitializePipeline.outputs['Initialize.LeaseToken'] ]
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: 'azure-functions-host-ci'
      secretsFilter: '*'
  - task: PowerShell@2
    displayName: 'Finish'
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\finish-pipeline.ps1'
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'' -leaseBlob $(leaseBlob) -leaseToken $(leaseToken)'