variables:
  buildNumber: $[ counter('constant', 13000) ]
  isReleaseBranch: $[contains(variables['Build.SourceBranch'], 'release/')]
  ${{ if contains(variables['Build.SourceBranch'], 'release/inproc6/') }}:
    minorVersionPrefix: "6"
  ${{ elseif contains(variables['Build.SourceBranch'], 'release/inproc8/') }}:
    minorVersionPrefix: "8"
  ${{ else }}:
    minorVersionPrefix: ""
  DOTNET_NOLOGO: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

pr:
  branches:
    include:
    - dev
    - release/4.*
    - release/inproc6/4.*
    - release/inproc8/4.*

trigger:
  branches:
    include:
    - dev
    - release/4.*
    - release/inproc6/4.*
    - release/inproc8/4.*

jobs:
- job: InitializePipeline
  pool:
    name: '1ES-Hosted-AzFunc'
    demands:
      - ImageOverride -equals MMS2019TLS
  steps:
  - task: UseDotNet@2 # The pinned SDK we use to build
    displayName: 'Install .NET SDK from global.json'
    inputs:
      packageType: sdk
      useGlobalJson: true
  - task: PowerShell@2
    displayName: 'Initialize'
    name: Initialize
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\initialize-pipeline.ps1'
      showWarnings: true

- job: BuildArtifacts
  dependsOn: InitializePipeline
  condition: and(succeeded(), or(ne(variables['Build.Reason'], 'PullRequest'), eq(dependencies.InitializePipeline.outputs['Initialize.BuildArtifacts'], true)))
  variables:
    ${{ if or( eq( variables['Build.Reason'], 'PullRequest' ), and( not( contains( variables['Build.SourceBranch'], 'release/inproc6/4.' ) ), not( contains( variables['Build.SourceBranch'], 'release/inproc8/4.' ) ), not( contains( variables['Build.SourceBranch'], 'release/4.' ) ), not( contains( variables['Build.SourceBranch'], 'release/ExtensionsMetadataGenerator/' ) ) ) ) }}:
      suffixTemp: $(buildNumber)
      packSuffixSwitchTemp: --version-suffix $(buildNumber)
      emgSuffixSwitchTemp: --version-suffix ci$(buildNumber)
    suffix: $[variables.suffixTemp] # this resolves to an empty string if it is missing
    packSuffixSwitch: $[variables.packSuffixSwitchTemp]
    emgSuffixSwitch: $[variables.emgSuffixSwitchTemp]
  pool:
    name: '1ES-Hosted-AzFunc'
    demands:
      - ImageOverride -equals MMS2019TLS
  steps:
  - template: build/install-dotnet.yml
  - task: PowerShell@2
    displayName: "Build artifacts"
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\build-extensions.ps1'
      arguments: '-buildNumber "$(buildNumber)" -suffix "$(suffix)" -minorVersionPrefix "$(minorVersionPrefix)"'
  - task: PowerShell@2
    displayName: "Check for security vulnerabilities"
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\check-vulnerabilities.ps1'
  - task: PowerShell@2
    condition: eq(variables['RUNBUILDFORINTEGRATIONTESTS'], 'True')
    displayName: "Update host references"
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\update-hostreferences.ps1'
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)\buildoutput'
      Contents: '**\*.zip'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: DotNetCoreCLI@2
    displayName: 'Build host packages'
    inputs:
      command: 'custom'
      custom: 'pack'
      arguments: -o packages -p:BuildNumber=$(buildNumber) -c Release $(packSuffixSwitch)
      projects: |
        **\WebJobs.Script.csproj
        **\WebJobs.Script.WebHost.csproj
        **\WebJobs.Script.Grpc.csproj

  - pwsh: |
      foreach ($baseName in @("WebJobs.Script", "WebJobs.Script.WebHost", "WebJobs.Script.Grpc"))
      {
        $packageName = "Microsoft.Azure." + $baseName + "*.nupkg"
        $sourcePath = "$(Build.Repository.LocalPath)/packages/$packageName"
        if (-not (test-path $sourcePath))
        {
          throw "Unable to find '$packageName' at './package'"
        }
        Copy-Item -Path $sourcePath -Destination $(Build.ArtifactStagingDirectory) -ErrorAction Stop -Verbose -Force}
    condition: eq(variables['RUNBUILDFORINTEGRATIONTESTS'], 'True')
    displayName: 'Copy package to ArtifactStagingDirectory'

  - task: NuGetCommand@2
    condition: eq(variables['RUNBUILDFORINTEGRATIONTESTS'], 'True')
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: 'e6a70c92-4128-439f-8012-382fe78d6396/f37f760c-aebd-443e-9714-ce725cd427df'
      allowPackageConflicts: true

  - task: DotNetCoreCLI@2
    displayName: 'Build performance package'
    inputs:
      command: 'custom'
      custom: 'pack'
      arguments: '-o WebJobs.Script.Performance.App'
      projects: |
        **\WebJobs.Script.Performance.App.csproj
  - task: DotNetCoreCLI@2
    displayName: 'Build Abstractions and ExtensionsMetadataGenerator'
    inputs:
      command: 'build'
      arguments: '-c Release'
      projects: |
        **\ExtensionsMetadataGenerator.csproj
        **\WebJobs.Script.Abstractions.csproj
  - task: DotNetCoreCLI@2
    displayName: 'Pack WebJobs.Script.Abstractions package'
    inputs:
      command: 'custom'
      custom: 'pack'
      arguments: '--no-build -c Release -o packages'
      projects: |
        **\WebJobs.Script.Abstractions.csproj
  - task: DotNetCoreCLI@2
    displayName: 'Pack ExtensionsMetadataGenerator package'
    inputs:
      command: 'custom'
      custom: 'pack'
      arguments: '--no-build -c Release -o packages $(emgSuffixSwitch)'
      projects: |
        **\ExtensionsMetadataGenerator.csproj
        steps:
  - publish: $(Build.ArtifactStagingDirectory)\SiteExtension
    artifact: SiteExtension
  - pwsh: |
      if ((test-path $(Build.ArtifactStagingDirectory)\ZippedPatchSiteExtension))
      {
        Write-Host "Patched site extension detected."
        Write-Host "##vso[task.setvariable variable=isPatchVersion]true"
      }
    displayName: 'Set isPatchVersion'
  - publish: $(Build.ArtifactStagingDirectory)\ZippedPatchSiteExtension
    artifact: PatchedSiteExtension
    condition: and(succeeded(), eq(variables['isPatchVersion'], 'true'))  
  - publish: $(Build.ArtifactStagingDirectory)\PrivateSiteExtension
    artifact: PrivateSiteExtension
  - publish: $(Build.ArtifactStagingDirectory)\Symbols
    artifact: Symbols
  - publish: $(Build.Repository.LocalPath)\packages
    artifact: NugetPackages
  - publish: $(Build.Repository.LocalPath)\WebJobs.Script.Performance.App
    artifact: Performance